library("rgdal")
library("shiny")
library("leaflet")
library("dplyr")
library("DT")
install.packages("DT")
rm(list=ls())
library("rvest")
#Read in iShares country ETF:s
df <- read.table("/home/david/Country_returns/ETF", header=TRUE)
df <- subset(df, select = c(Country,Ticker,Inception_date,Exp_ratio))
#Desired columns
df$PriceEarning <- NA
df$PriceBook <- NA
df$PriceSales <- NA
df$PriceCashFlow <- NA
df$year_ret <- NA
df$three_month_ret <- NA
df$one_month_ret <- NA
#Function for equity metrics
obtain_equity <- function(ticker){
web <- gsub("1",ticker,"https://finance.yahoo.com/quote/1/holdings?p=1")
yahoo <- read_html(web)
x <- 5
for(i in 2:5){
df[ticker, x] <- yahoo %>%
html_nodes(xpath=gsub("z", as.character(i),'//*[@id="Col1-0-Holdings-Proxy"]/section/div[2]/div[1]/div/div[z]/span[2]')) %>%
html_text()
x <- x + 1
}
return(df[ticker,5:8])
}
#Function for returns (month and year)
obtain_return <- function(ticker){
web <- gsub("1",ticker,"https://finance.yahoo.com/quote/1/performance?p=1")
yahoo <- read_html(web)
x <- 9
for(i in 5:3){
df[ticker, x] <- yahoo %>%
html_nodes(xpath=gsub("z", as.character(i),'//*[@id="Col1-0-Performance-Proxy"]/section/div[2]/div/div[z]/span[2]')) %>%
html_text()
x <- x + 1
}
return(df[ticker,9:11])
}
#Run both scrape functions
for(i in as.character(df$Ticker)){
df[which(df$Ticker == i), 5:8] <- obtain_equity(i)
df[which(df$Ticker == i), 9:11] <- obtain_return(i)
Sys.sleep(1)
}
#Clean "%" from return values
df[,9] <- substr(df[,9], 1, nchar(df[,9])-1)
df[,10] <- substr(df[,10], 1, nchar(df[,10])-1)
df[,11] <- substr(df[,11], 1, nchar(df[,11])-1)
#Change countries containing more than 1 name
df$Country <- as.character(df$Country)
df[which(df$Country == "UnitedKingdom"), "Country"] <- "United Kingdom"
df[which(df$Country == "HongKong"), "Country"] <- "Hong Kong"
df[which(df$Country == "NewZealand"), "Country"] <- "New Zealand"
df[which(df$Country == "SouthAfrica"), "Country"] <- "South Africa"
df[which(df$Country == "South Korea"), "Country"] <- "Republic of Korea"
df[which(df$Country == "UAE"), "Country"] <- "United Arab Emirates"
df[which(df$Country == "Russia"), "Country"] <- "Russian Federation"
df$Country <- as.factor(df$Country)
write.csv(df, file = "/home/david/Country_returns/ETF_data.csv",row.names = FALSE)
rm(list=ls())
library("rgdal")
library("shiny")
library("leaflet")
library("dplyr")
library("DT")
df <- read.csv("/home/david/Country_returns/ETF_data.csv")
url <- "https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson"
res <- readOGR(dsn = url, layer = "OGRGeoJSON")
#Create new columns for financial metrics
res@data$PriceEarning <- NA
res@data$PriceBook <- NA
res@data$PriceSales <- NA
res@data$PriceCashFlow <- NA
res@data$year_ret <- NA
res@data$three_month_ret <- NA
res@data$one_month_ret <- NA
res@data$totalrank <- NA
#Rank Equity metrics from lowest to highest then sum the total rank to get an overall score
df$perank <- rank(df$PriceEarning)
df$pbrank <- rank(df$PriceBook)
df$psrank <- rank(df$PriceSales)
df$pcfrank <- rank(df$PriceCashFlow)
df$totalrank <- df %>% select(perank:pcfrank) %>% rowSums(na.rm=TRUE)
df$totalrank <- rank(df$totalrank)
#Iterate over countries and assign financial metric from ETF value
for(i in 1:177){
if(as.character(res@data$name_long[i]) %in% df$Country){
res@data$PriceEarning[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"PriceEarning"])
res@data$PriceBook[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"PriceBook"])
res@data$PriceSales[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"PriceSales"])
res@data$PriceCashFlow[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"PriceCashFlow"])
res@data$year_ret[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"year_ret"])
res@data$three_month_ret[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"three_month_ret"])
res@data$one_month_ret[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"one_month_ret"])
res@data$totalrank[i] <- df[which(df$Country
==as.character(res@data$name_long[i])) ,"totalrank"]
}
}
# Returns and total rank of equity values
returns <- res@data$year_ret
equities <- res@data$totalrank
#Color palette used for returns
bins <- c(-Inf, -20, -10, -5, 0, 5, 10, 20, 30, Inf)
colors <- c("#b30000","#e34a33","#fc8d59","#fdcc8a","#f1eef6","#d0d1e6","#a6bddb","#74a9cf","#2b8cbe","#045a8d")
vars <- c(
"Price/Earnings" = "PriceEarning",
"Price/Book" = "PriceBook",
"Price/Sales" = "PriceSales",
"Price/CashFlow" = "PriceCashFlow",
"1 Year Returns" = "year_ret",
"Three Month Returns" = "three_month_ret",
"One Month Returns" = "one_month_ret",
"Value Ranking" = "totalrank"
)
ui <- navbarPage("Country Explorer", id="nav",
tabPanel("Interactive Map",
div(class = "outer",
tags$head(
# Include our custom CSS
includeCSS("/home/david/Country_returns/style.css")
),
#Display the world map
leafletOutput("CountryMap",width="100%", height="100%"),
#Panel for selecting financial metric
absolutePanel(top=40, right=10, draggable=TRUE, style = "opacity: 0.8",
h2("Country Explorer"),
selectInput("metric", "Options", vars)
)
)
),
#Display the datatable
tabPanel("Data Explorer",
div(class = "outer",
hr(),
DT::dataTableOutput("countrytable",width=1200, height = 800)
)
),
#General information about project
tabPanel("About",
sidebarLayout(
sidebarPanel(
h1("About this project"),
p("I built this project to visualize and conceptualize
the financial metrics and returns of the smaller financial
markets in the world. The data is based on iShares MSCI Capped ETF:s
and that's why for example the US market is not present on the map."),
p("Since data on a lot of countries is hard to acquire and does not exists as
ETF:s this is just a small representation of the financial markets. Furthermore,
ETF:s are built around the MSCI index and should not be seen as an accurate
representation of the countries financial metrics but an approximation."),
h2("Code"),
p("GitHub: ", a("https://www.r-bloggers.com/more-explorations-of-shiny/",
href="https://www.r-bloggers.com/more-explorations-of-shiny/"))
),
mainPanel(
h1("Data"),
p(strong("Price/Earnings: "),
"Current price per share divided by last reported earnings of the company"),
p(strong("Price/Sales: "),
"Current price per share divided by last reported total sales of the company"),
p(strong("Price/Book: "),
"Current price per share divided by last reported book value of the company"),
p(strong("Price/CashFlow: "),
"Current price per share divided by last reported cashflow of the company"),
p(strong("Value Ranking: "),
"The metrics above have been ranked from lowest to highest and then combined in to
a ranking of the countries with the best overall rating"),
p(strong("Returns: "),
"How much has an investment in this ETF/Country approximately yielded in the last
month, three month and 1 year period ?")
)
))
)
server <- function(input, output, session){
output$CountryMap <- renderLeaflet({
leaflet(res)
})
observe({
metric <- input$metric
metricData <- res@data[,metric]
#Output and colors if return metric is selected
if (metric == "year_ret" | metric == "three_month_ret" | metric == "one_month_ret") {
leafletProxy("CountryMap", data = res) %>%
clearShapes() %>%
setView(lng=0.878906, lat=40.601441, zoom=2) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorBin(colors, metricData, bins= bins)(metricData),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE),
label = ~paste0(sovereignt, ": ", formatC(metricData, big.mark = ","))) %>%
addLegend(pal = colorBin(colors, metricData, bins= bins), values = ~metricData, opacity = 0.7, title = NULL,
position = "bottomleft", layerId = 1)
} else {
#Output and colors if equity metric is selected
leafletProxy("CountryMap", data = res) %>%
clearShapes() %>%
setView(lng=0.878906, lat=40.601441, zoom=2) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorBin("Blues", metricData, bins=8, reverse=TRUE)(metricData),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE),
label = ~paste0(sovereignt, ": ", formatC(metricData, big.mark = ","))) %>%
addLegend(pal = colorBin("Blues", metricData, bins=8, reverse=TRUE), values = ~metricData, opacity = 0.7, title = NULL,
position = "bottomleft", layerId = 1)
}
})
#Output of the datatable
output$countrytable <- DT::renderDataTable({
data <- df
action <- DT::dataTableAjax(session, data)
DT::datatable(data, extensions = "Scroller",options = list(scrollX=TRUE,scrollY="400px", ajax = list(url = action)), escape = FALSE)
})
}
shinyApp(ui = ui, server = server)
rm(list=ls())
library("rgdal")
library("shiny")
library("leaflet")
library("dplyr")
library("DT")
df <- read.csv("/home/david/Country_returns/ETF_data.csv")
url <- "https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson"
res <- readOGR(dsn = url, layer = "OGRGeoJSON")
#Create new columns for financial metrics
res@data$PriceEarning <- NA
res@data$PriceBook <- NA
res@data$PriceSales <- NA
res@data$PriceCashFlow <- NA
res@data$year_ret <- NA
res@data$three_month_ret <- NA
res@data$one_month_ret <- NA
res@data$totalrank <- NA
#Rank Equity metrics from lowest to highest then sum the total rank to get an overall score
df$perank <- rank(df$PriceEarning)
df$pbrank <- rank(df$PriceBook)
df$psrank <- rank(df$PriceSales)
df$pcfrank <- rank(df$PriceCashFlow)
df$totalrank <- df %>% select(perank:pcfrank) %>% rowSums(na.rm=TRUE)
df$totalrank <- rank(df$totalrank)
#Iterate over countries and assign financial metric from ETF value
for(i in 1:177){
if(as.character(res@data$name_long[i]) %in% df$Country){
res@data$PriceEarning[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"PriceEarning"])
res@data$PriceBook[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"PriceBook"])
res@data$PriceSales[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"PriceSales"])
res@data$PriceCashFlow[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"PriceCashFlow"])
res@data$year_ret[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"year_ret"])
res@data$three_month_ret[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"three_month_ret"])
res@data$one_month_ret[i] <- as.numeric(df[which(df$Country
==as.character(res@data$name_long[i])) ,"one_month_ret"])
res@data$totalrank[i] <- df[which(df$Country
==as.character(res@data$name_long[i])) ,"totalrank"]
}
}
library("shiny")
library("leaflet")
library("DT")
vars <- c(
"Price/Earnings" = "PriceEarning",
"Price/Book" = "PriceBook",
"Price/Sales" = "PriceSales",
"Price/CashFlow" = "PriceCashFlow",
"1 Year Returns" = "year_ret",
"Three Month Returns" = "three_month_ret",
"One Month Returns" = "one_month_ret",
"Value Ranking" = "totalrank"
)
ui <- navbarPage("Country Explorer", id="nav",
tabPanel("Interactive Map",
div(class = "outer",
tags$head(
# Include our custom CSS
includeCSS("/home/david/Country_returns/style.css")
),
#Display the world map
leafletOutput("CountryMap",width="100%", height="100%"),
#Panel for selecting financial metric
absolutePanel(top=40, right=10, draggable=TRUE, style = "opacity: 0.8",
h2("Country Explorer"),
selectInput("metric", "Options", vars)
)
)
),
#Display the datatable
tabPanel("Data Explorer",
div(class = "outer",
hr(),
DT::dataTableOutput("countrytable",width=1200, height = 800)
)
),
#General information about project
tabPanel("About",
sidebarLayout(
sidebarPanel(
h1("About this project"),
p("I built this project to visualize and conceptualize
the financial metrics and returns of the smaller financial
markets in the world. The data is based on iShares MSCI Capped ETF:s
and that's why for example the US market is not present on the map."),
p("Since data on a lot of countries is hard to acquire and does not exists as
ETF:s this is just a small representation of the financial markets. Furthermore,
ETF:s are built around the MSCI index and should not be seen as an accurate
representation of the countries financial metrics but an approximation."),
h2("Code"),
p("GitHub: ", a("https://www.r-bloggers.com/more-explorations-of-shiny/",
href="https://www.r-bloggers.com/more-explorations-of-shiny/"))
),
mainPanel(
h1("Data"),
p(strong("Price/Earnings: "),
"Current price per share divided by last reported earnings of the company"),
p(strong("Price/Sales: "),
"Current price per share divided by last reported total sales of the company"),
p(strong("Price/Book: "),
"Current price per share divided by last reported book value of the company"),
p(strong("Price/CashFlow: "),
"Current price per share divided by last reported cashflow of the company"),
p(strong("Value Ranking: "),
"The metrics above have been ranked from lowest to highest and then combined in to
a ranking of the countries with the best overall rating"),
p(strong("Returns: "),
"How much has an investment in this ETF/Country approximately yielded in the last
month, three month and 1 year period ?")
)
))
)
library("shiny")
library("leaflet")
library("dplyr")
library("DT")
#Color palette used for returns
bins <- c(-Inf, -20, -10, -5, 0, 5, 10, 20, 30, Inf)
colors <- c("#b30000","#e34a33","#fc8d59","#fdcc8a","#f1eef6","#d0d1e6","#a6bddb","#74a9cf","#2b8cbe","#045a8d")
server <- function(input, output, session){
output$CountryMap <- renderLeaflet({
leaflet(res)
})
observe({
metric <- input$metric
metricData <- res@data[,metric]
#Output and colors if return metric is selected
if (metric == "year_ret" | metric == "three_month_ret" | metric == "one_month_ret") {
leafletProxy("CountryMap", data = res) %>%
clearShapes() %>%
setView(lng=0.878906, lat=40.601441, zoom=2) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorBin(colors, metricData, bins= bins)(metricData),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE),
label = ~paste0(sovereignt, ": ", formatC(metricData, big.mark = ","))) %>%
addLegend(pal = colorBin(colors, metricData, bins= bins), values = ~metricData, opacity = 0.7, title = NULL,
position = "bottomleft", layerId = 1)
} else {
#Output and colors if equity metric is selected
leafletProxy("CountryMap", data = res) %>%
clearShapes() %>%
setView(lng=0.878906, lat=40.601441, zoom=2) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = ~colorBin("Blues", metricData, bins=8, reverse=TRUE)(metricData),
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE),
label = ~paste0(sovereignt, ": ", formatC(metricData, big.mark = ","))) %>%
addLegend(pal = colorBin("Blues", metricData, bins=8, reverse=TRUE), values = ~metricData, opacity = 0.7, title = NULL,
position = "bottomleft", layerId = 1)
}
})
#Output of the datatable
output$countrytable <- DT::renderDataTable({
data <- df
action <- DT::dataTableAjax(session, data)
DT::datatable(data, extensions = "Scroller",options = list(scrollX=TRUE,scrollY="400px", ajax = list(url = action)), escape = FALSE)
})
}
shinyApp(ui = ui, server = server)
